events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    server {
        listen 8080;
        server_name localhost;

        # Redirection racine -> /react/
        location = / {
            return 302 /react/;
        }

        # PUBLIC: /react/ (login)
        location = /react/ {

            auth_request /auth_check;

            root /usr/share/nginx/html;
            index index.html;

            try_files /react/index.html =404;

        }

        # PUBLIC: /react/inscription
        location = /react/inscription {
            root /usr/share/nginx/html;
            index index.html;
            try_files /react/index.html =404;
        }
        
        location ^~ /react/static/ {
            root /usr/share/nginx/html;
            try_files $uri =404;
        }


        # PROTECTED: tout le reste sous /react
        location /react/ {
            auth_request /auth_check;
            root /usr/share/nginx/html;
            index index.html;
            try_files /react/index.html =404;

            error_page 403 = @unauthorized; 
        }

        # AUTH CHECK
        location = /auth_check {
            internal;
            proxy_pass http://auth:3000/authenticate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;

            error_page 401 = /react/;
        }

        # Routes API
        location /authenticate {
            proxy_pass http://auth:3000/authenticate;
        }

        location /login {
            proxy_pass http://auth:3000/login;
        }

        location /register {
            proxy_pass http://auth:3000/register;
        }

        # En cas de 401, renvoyer vers login
        location @unauthorized {
            return 302 /react/;
        }
        
        error_page 401 = @unauthorized;
    }
}
